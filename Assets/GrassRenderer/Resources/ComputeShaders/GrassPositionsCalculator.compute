#pragma kernel InitializeGrass
#include "Simplex.compute"

struct grass_data {
	float4 position;
	float2 uv;
};

RWStructuredBuffer<grass_data> _GrassDataBuffer;

Texture2D<float4> _HeightMap;
SamplerState sampler_HeightMap;

int _Dimension, _Scale, _NoiseScale;
float _DisplacementStrength, _YOffset;

[numthreads(8,8,1)]
void InitializeGrass(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= uint(_Dimension) || id.y >= uint(_Dimension)) return;

	grass_data grass;

	// Applying base position and scale
	float2 baseXZ = (id.xy - float(_Dimension) * 0.5) * (1.0 / _Scale);

	float4 pos = 0;
	pos.xz = baseXZ;
	pos.y  = _YOffset;

	// Sampling height map (if needed)
	float2 uvHM = id.xy / float(_Dimension);
	float h = _HeightMap.SampleLevel(sampler_HeightMap, uvHM, 0).r;

	// Adding noise to the position and applying displacement
	pos.x += snoise(float3(baseXZ.x, baseXZ.y, 0.0)) * _NoiseScale;
	pos.z += snoise(float3(baseXZ.x, baseXZ.y, 0.0)) * _NoiseScale + float(_Dimension) * 0.5;
	pos.y += h * _DisplacementStrength;

	// Calculating UV coordinates
	float2 uv = (id.xy) * (1.0f / float(_Scale));
	uv.xy /= float(_Dimension) * (1.0f / float(_Scale));
	uv.y = 1 - uv.y;
	uv.x = 1 - uv.x;

	grass.position = pos;
	grass.uv = uv;

	_GrassDataBuffer[id.x + id.y * _Dimension] = grass;
}